{"version":3,"sources":["next-node-fetch.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-node-fetch.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var NxDataTransform = require('@feizheng/next-data-transform');\n  var nxContentType = require('@feizheng/next-content-type');\n  var nxDeepAssign = require('@feizheng/next-deep-assign');\n  var nxParam = require('@feizheng/next-param');\n  var nxDelay = require('@feizheng/next-delay');\n  var nodeFetch = require('node-fetch');\n  var DEFAULT_OPTIONS = { dataType: 'json', delay: 0, fetch: nodeFetch, responseType: 'json' };\n\n  var NxNodeFetch = nx.declare('nx.NodeFetch', {\n    properties: {\n      config: {\n        set: function (inConfig) {\n          this._config = nx.mix(null, DEFAULT_OPTIONS, inConfig);\n        },\n        get: function () {\n          return this._config;\n        }\n      }\n    },\n    statics: {\n      request: function (inUrl, inMethod, inData, inOptions) {\n        var options = nx.mix(null, DEFAULT_OPTIONS, this.config, inOptions);\n        var isGET = inMethod === 'get';\n        var body = isGET ? null : NxDataTransform[options.dataType](inData);\n        var url = isGET ? nxParam(inData, inUrl) : inUrl;\n        var headers = { 'Content-Type': nxContentType(options.dataType) };\n        var config = nxDeepAssign({ method: inMethod, body: body, headers: headers }, options);\n        var responseHandler = function (res) {\n          return options.responseType ? res[options.responseType]() : res;\n        };\n\n        return options.delay\n          ? options\n            .fetch(url, config)\n            .then(nxDelay(options.delay))\n            .then(responseHandler)\n          : options.fetch(url, config).then(responseHandler);\n      },\n      'get,delete,head,post,put,patch': function (inMethod) {\n        return function (inUrl, inData, inOptions) {\n          return this.request(inUrl, inMethod, inData, inOptions);\n        };\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxNodeFetch;\n  }\n})();\n"]}